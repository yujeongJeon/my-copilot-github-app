import {run, type ApplicationFunctionOptions, type Probot} from 'probot'
import bodyParser from 'body-parser'
import {getAppInstallations, getInstallationOctokit, getOpenAI} from './utils'

import {SYS_PROMPT_SWEBENCH} from './prompt'

function app(app: Probot, {getRouter}: ApplicationFunctionOptions) {
    app.on('issues.opened', async (context) => {
        const issueComment = context.issue({
            body: 'Thanks for opening this issue!',
        })
        return context.octokit.issues.createComment(issueComment)
    })

    app.on(['issues.edited'], async (context) => {
        console.log(context.payload)
        const issueComment = context.issue({
            body: 'edited!',
        })
        return context.octokit.issues.createComment(issueComment)
    })

    app.onError(async (error) => {
        app.log.error(error)
    })

    app.on(['pull_request.opened', 'pull_request.synchronize'], async (context) => {
        const pr = context.payload.pull_request
        const owner = pr.base.repo.owner.login
        const repo = pr.base.repo.name
        const prNumber = pr.number
        const base = pr.base.sha
        const head = pr.head.sha

        // 1. 커밋 히스토리 조회
        const commits = await context.octokit.paginate(
            context.octokit.repos.compareCommits,
            {
                owner,
                repo,
                base,
                head,
            },
            // @ts-ignore
            (res) => res.data.commits,
        )

        // 2. 커밋 메시지와 URL 추출
        let commitSummaries = []
        let urlContents = []
        const urlRegex = /(https?:\/\/[^\s]+)/g

        for (const commit of commits) {
            commitSummaries.push(`- ${commit.commit.message}`)
            const urls = commit.commit.message.match(urlRegex)
            if (urls) {
                for (const url of urls) {
                    urlContents.push(url)
                }
            }
        }

        // 3. Responses API 프롬프트 구성
        const input = `
다음은 Pull Request의 커밋 히스토리입니다:
${commitSummaries.join('\n')}

${urlContents.length > 0 ? `커밋 메시지에 포함된 URL의 내용:\n${urlContents.join('\n\n')}` : ''}

이 정보를 바탕으로 PR의 제목과 본문을 명확하고 친절하게 추천해줘.
URL을 조회할 수 있으면 조회해서 그 내용도 본문에 포함해줘.

출력은 다음 포맷을 따라줘:
제목: (추천 제목)
본문: (추천 본문)
`.trim()

        // 4. OpenAI Responses API 호출 (openai@4.x)
        const response = await getOpenAI().responses.create({
            model: 'gpt-4o',
            input,
            instructions: SYS_PROMPT_SWEBENCH,
            text: {
                format: {
                    name: 'createPullRequest',
                    description: 'Create a pull request with the given commit history and url contents.',
                    type: 'json_schema',
                    schema: {
                        type: 'object',
                        properties: {
                            title: {type: 'string'},
                            body: {type: 'string'},
                        },
                        required: ['title', 'body'],
                        additionalProperties: false,
                    },
                },
            },
        })

        type PrSummary = {title: string; body: string}

        function safeParse<T>(data: string): T {
            try {
                const parsedData = JSON.parse(data)
                if (typeof parsedData === 'object' && parsedData !== null) {
                    return parsedData as T
                }
            } catch (error) {
                console.error('JSON parsing error:', error)
            }
            throw new Error('Invalid response format')
        }

        // 5. 응답 파싱
        const {title, body} = safeParse<PrSummary>(response.output_text)

        // 6. PR 제목/본문 업데이트
        await context.octokit.pulls.update({
            owner,
            repo,
            pull_number: prNumber,
            title,
            body: body.concat(
                `\n
###### generated by \`naverpay-work-helper\``, // Add a footer to the PR body
            ),
        })
    })

    if (!getRouter) {
        return
    }

    const router = getRouter()

    router.use(bodyParser.json())

    router.post('/copilot-issue-helper', async (req, res) => {
        const body = req.body
        const {org, repo, issue_url} = body

        console.log(org, repo, issue_url)

        const installations = await getAppInstallations()

        const installationId = installations.find((installation) => {
            const {full_name} = installation
            return full_name === `${org}/${repo}`
        })?.installationId
        if (!installationId) {
            res.status(404).send('Installation not found')
            return
        }
        const octokit = getInstallationOctokit(installationId)

        const {data} = await octokit.rest.issues.get({
            owner: org,
            repo: repo,
            issue_number: +issue_url.split('/').pop(),
        })

        res.status(200).send({
            title: data.title,
            body: data.body,
        })
    })

    router.post('/create-discussion', async (req, res) => {})

    process.on('SIGTERM', () => {
        console.log('SIGTERM received, shutting down gracefully')
        process.exit(0)
    })
}

run(app).catch((error) => {
    // eslint-disable-next-line no-console
    console.error(`Something went wrong`)
    // eslint-disable-next-line no-console
    console.error(error)
})
